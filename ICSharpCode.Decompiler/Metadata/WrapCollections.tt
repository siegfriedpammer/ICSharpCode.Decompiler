// Copyright (c) 2014 Daniel Grunwald
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="Wrap.tt" #>
<#@ output extension=".cs" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using SRM = System.Reflection.Metadata;
namespace ICSharpCode.Decompiler.Metadata
{
<#
foreach (var typeTuple in typeTuples.Where(t => t.collectionType != null)) {
	var mainType = typeTuple.mainType;
	var handleType = typeTuple.handleType;
	var collectionType = typeTuple.collectionType;
	bool hasCount = collectionType.GetProperty("Count") != null;
#>
	public partial struct <#=mainType.Name#>Collection : <#=string.Format("{0}<{1}>", hasCount ? "IReadOnlyCollection" : "IEnumerable", mainType.Name)#>
	{
		readonly ModuleDefinition module;
		SRM.<#=collectionType.Name#> handleCollection;

		internal <#=mainType.Name#>Collection(ModuleDefinition module, SRM.<#=collectionType.Name#> handleCollection)
		{
			Debug.Assert(module != null);
			this.module = module;
			this.handleCollection = handleCollection;
		}

<#	if (hasCount) { #>
		public int Count {
			get {
				return module != null ? handleCollection.Count : 0;
			}
		}
<#	} #>

		public Enumerator GetEnumerator()
		{
			return new Enumerator(module, handleCollection.GetEnumerator());
		}

		IEnumerator<<#=mainType.Name#>> IEnumerable<<#=mainType.Name#>>.GetEnumerator()
		{
			if (module == null)
				return Enumerable.Empty<<#=mainType.Name#>>().GetEnumerator();
			return this.handleCollection.Select(new Func<SRM.<#=handleType.Name#>, <#=mainType.Name#>>(module.FromHandle)).GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			if (module == null)
				return Enumerable.Empty<<#=mainType.Name#>>().GetEnumerator();
			return this.handleCollection.Select(new Func<SRM.<#=handleType.Name#>, <#=mainType.Name#>>(module.FromHandle)).GetEnumerator();
		}
		
		public struct Enumerator
		{
			readonly ModuleDefinition module;
			SRM.<#=collectionType.Name#>.Enumerator handleEnumerator;

			internal Enumerator(ModuleDefinition module, SRM.<#=collectionType.Name#>.Enumerator handleEnumerator)
			{
				this.module = module;
				this.handleEnumerator = handleEnumerator;
			}
			
			public <#=mainType.Name#> Current {
				get {
					return new <#=mainType.Name#>(module, handleEnumerator.Current);
				}
			}

			public bool MoveNext()
			{
				if (module == null)
					return false;
				return handleEnumerator.MoveNext();
			}
		}
	}
<# } // end foreach (mainType in structs) #>
}