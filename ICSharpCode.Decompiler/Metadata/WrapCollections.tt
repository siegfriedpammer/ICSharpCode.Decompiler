// Copyright (c) 2014 Daniel Grunwald
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="$(ProjectDir)\..\packages\Microsoft.Bcl.Metadata.1.0.11-alpha\lib\portable-net45+win8\System.Reflection.Metadata.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Reflection.Metadata" #>
<#@ output extension=".cs" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using SRM = System.Reflection.Metadata;
namespace ICSharpCode.Decompiler.Metadata
{
<#
Assembly metadataAssembly = typeof(MetadataReader).Assembly;
var structs = metadataAssembly.GetExportedTypes().Where(t => t.IsValueType && t.Namespace == "System.Reflection.Metadata").ToList();

var typeTuples = (from mainType in structs
				  join handleType in structs on mainType.Name + "Handle" equals handleType.Name
				  let collectionType = structs.FirstOrDefault(t => t.Name == mainType.Name + "HandleCollection")
				  orderby mainType.Name
				  select new { mainType, handleType, collectionType }
				 ).ToList();
typeTuples.Add(new { mainType = typeof(TypeDefinition), handleType = typeof(TypeHandle), collectionType = typeof(TypeHandleCollection) });

foreach (var typeTuple in typeTuples.Where(t => t.collectionType != null)) {
	var mainType = typeTuple.mainType;
	var handleType = typeTuple.handleType;
	var collectionType = typeTuple.collectionType;
	
#>
	public partial struct <#=mainType.Name#>Collection : IEnumerable<<#=mainType.Name#>>
	{
		readonly Module module;
		SRM.<#=collectionType.Name#> handleCollection;

		internal <#=mainType.Name#>Collection(Module module, SRM.<#=collectionType.Name#> handleCollection)
		{
			this.module = module;
			this.handleCollection = handleCollection;
		}

		/// <summary>
		/// Gets the module containing this <#=mainType.Name#>Collection.
		/// </summary>
		public Module ContainingModule {
			get { return module; }
		}

		public Enumerator GetEnumerator()
		{
			return new Enumerator(module, handleCollection.GetEnumerator());
		}

		IEnumerator<<#=mainType.Name#>> IEnumerable<<#=mainType.Name#>>.GetEnumerator()
		{
			if (module == null)
				return Enumerable.Empty<<#=mainType.Name#>>().GetEnumerator();
			return this.handleCollection.Select(new Func<SRM.<#=handleType.Name#>, <#=mainType.Name#>>(module.FromHandle)).GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			if (module == null)
				return Enumerable.Empty<<#=mainType.Name#>>().GetEnumerator();
			return this.handleCollection.Select(new Func<SRM.<#=handleType.Name#>, <#=mainType.Name#>>(module.FromHandle)).GetEnumerator();
		}

		public struct Enumerator
		{
			readonly Module module;
			SRM.<#=collectionType.Name#>.Enumerator handleEnumerator;

			internal Enumerator(Module module, SRM.<#=collectionType.Name#>.Enumerator handleEnumerator)
			{
				this.module = module;
				this.handleEnumerator = handleEnumerator;
			}

			public <#=mainType.Name#> Current {
				get {
					return new <#=mainType.Name#>(module, handleEnumerator.Current);
				}
			}

			public bool MoveNext()
			{
				if (module == null)
					return false;
				return handleEnumerator.MoveNext();
			}
		}
	}
<# } // end foreach (mainType in structs) #>
}