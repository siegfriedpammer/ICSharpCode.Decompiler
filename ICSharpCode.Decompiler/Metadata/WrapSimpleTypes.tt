// Copyright (c) 2014 Daniel Grunwald
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="Wrap.tt" #>
<#@ output extension=".cs" #>
using System;
using System.Diagnostics;
using SRM = System.Reflection.Metadata;
namespace ICSharpCode.Decompiler.Metadata
{
<#
foreach (var typeTuple in typeTuples.Where(t => t.handleType == null && !t.mainType.IsEnum)) {
	var mainType = typeTuple.mainType;
#>
	public partial struct <#=mainType.Name#>
	{
		readonly ModuleDefinition module;
		SRM.<#=mainType.Name#> wrapped;

		internal <#=mainType.Name#>(ModuleDefinition module, SRM.<#=mainType.Name#> wrapped)
		{
			Debug.Assert(module != null);
			this.module = module;
			this.wrapped = wrapped;
		}

		/// <summary>
		/// Gets the module containing this <#=mainType.Name#>.
		/// </summary>
		public ModuleDefinition ContainingModule {
			get { return module; }
		}

<#	foreach (var propertyInfo in GetWrappableProperties(mainType)) { #>
		public <#=RetType(propertyInfo.PropertyType)#> <#=propertyInfo.Name#> {
			get {
				return <#=RetVal(propertyInfo.PropertyType, "wrapped." + propertyInfo.Name)#>;
			}
		}
<#	} // end foreach propertyInfo #>

<#	foreach (var methodInfo in GetWrappableMethods(mainType)) { #>
		public <#=RetType(methodInfo.ReturnType)#> <#=methodInfo.Name#>()
		{
			return <#=RetVal(methodInfo.ReturnType, "wrapped." + methodInfo.Name + "()")#>;
		}
<#	} // end foreach methodInfo #>
	}
<# } // end foreach typeTuple (structs) #>

<#
foreach (var typeTuple in typeTuples.Where(t => t.handleType == null && t.mainType.IsEnum)) {
	var mainType = typeTuple.mainType;
#>
	public enum <#=mainType.Name#> : <#=RetType(mainType.GetEnumUnderlyingType())#>
	{
<#	  foreach (var field in mainType.GetFields().Where(f => f.IsStatic)) { #>
		<#=field.Name#> = SRM.<#=mainType.Name#>.<#=field.Name#>,
<#	  } #>
	}
<# } // end foreach typeTuple (enums) #>

	partial class ModuleDefinition
	{
<#	foreach (var propertyInfo in GetWrappableProperties(typeof(MetadataReader))) { #>
		public <#=RetType(propertyInfo.PropertyType)#> <#=propertyInfo.Name#> {
			get {
				return <#=RetVal(propertyInfo.PropertyType, "metadata." + propertyInfo.Name)#>;
			}
		}
<#	} // end foreach (propertyInfo in GetWrappableProperties(typeof(MetadataReader))) #>

<#	foreach (var methodInfo in GetWrappableMethods(typeof(MetadataReader))) { #>
		public <#=RetType(methodInfo.ReturnType)#> <#=methodInfo.Name#>()
		{
			return <#=RetVal(methodInfo.ReturnType, "metadata." + methodInfo.Name + "()")#>;
		}
<#	} // end foreach (methodInfo in GetWrappableMethods(typeof(MetadataReader))) #>
	}
}