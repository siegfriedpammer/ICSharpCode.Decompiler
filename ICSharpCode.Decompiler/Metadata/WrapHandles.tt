// Copyright (c) 2014 Daniel Grunwald
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="$(ProjectDir)\..\packages\Microsoft.Bcl.Metadata.1.0.11-alpha\lib\portable-net45+win8\System.Reflection.Metadata.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Reflection.Metadata" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Diagnostics;
using SRM = System.Reflection.Metadata;
namespace ICSharpCode.Decompiler.Metadata
{
<#@ include file="Wrap.tt" #>
<#
Func<Type, HandleType> GetHandleTypeEnum = handleType => {
	Handle h = (Handle)(dynamic)Activator.CreateInstance(handleType);
	return h.HandleType;
};

foreach (var typeTuple in typeTuples.Where(t => t.handleType != null)) {
	var mainType = typeTuple.mainType;
	var handleType = typeTuple.handleType;
#>
	public partial struct <#=mainType.Name#> : IEquatable<<#=mainType.Name#>>
	{
		readonly ModuleDefinition module;
		SRM.<#=handleType.Name#> handle;

		internal <#=mainType.Name#>(ModuleDefinition module, SRM.<#=handleType.Name#> handle)
		{
			Debug.Assert(module != null);
			this.module = module;
			this.handle = handle;
		}

		/// <summary>
		/// Gets the module containing this <#=mainType.Name#>.
		/// </summary>
		public ModuleDefinition ContainingModule {
			get { return module; }
		}

		public bool IsNil {
			get { return handle.IsNil; }
		}

<#	if ((int)GetHandleTypeEnum(handleType) < 128) { #>
		/// <summary>
		/// Gets the metadata token associated with this <#=mainType.Name#>.
		/// </summary>
		public int MetadataToken {
			get { 
				if (handle.IsNil)
					return 0;
				return SRM.Ecma335.MetadataTokens.GetToken(module.metadata, handle); 
			}
		}
<#  } #>

<#	foreach (var propertyInfo in GetWrappableProperties(mainType)) { #>
		public <#=RetType(propertyInfo.PropertyType)#> <#=propertyInfo.Name#> {
			get {
				if (handle.IsNil)
					return default(<#=RetType(propertyInfo.PropertyType)#>);
				var target = module.metadata.Get<#=mainType.Name#>(handle);
				return <#=RetVal(propertyInfo.PropertyType, "target." + propertyInfo.Name)#>;
			}
		}
<#	} // end foreach (propertyInfo in mainType.GetProperties()) #>

<#	foreach (var methodInfo in GetWrappableMethods(mainType)) { #>
		public <#=RetType(methodInfo.ReturnType)#> <#=methodInfo.Name#>()
		{
			if (handle.IsNil)
				return default(<#=RetType(methodInfo.ReturnType)#>);
			var target = module.metadata.Get<#=mainType.Name#>(handle);
			return <#=RetVal(methodInfo.ReturnType, "target." + methodInfo.Name + "()")#>;
		}
<#	} // end foreach (propertyInfo in mainType.GetProperties()) #>

		public override int GetHashCode()
		{
			if (module != null)
				return module.GetHashCode() ^ handle.GetHashCode();
			else
				return 0;
		}

		public override bool Equals(object obj)
		{
			return obj is <#=mainType.Name#> && Equals((<#=mainType.Name#>)obj);
		}

		public bool Equals(<#=mainType.Name#> other)
		{
			return module == other.module && handle == other.handle;
		}
	}
<# } // end foreach typeTuple #>

	partial class ModuleDefinition
	{
<#	foreach (var typeTuple in typeTuples.Where(t => t.handleType != null)) {
		var mainType = typeTuple.mainType;
		var handleType = typeTuple.handleType;
#>
		public <#=mainType.Name#> FromHandle(SRM.<#=handleType.Name#> handle)
		{
			if (handle.IsNil)
				throw new ArgumentNullException("handle");
			return new <#=mainType.Name#>(this, handle);
		}
<#	} // end foreach typeTuple #>
	}
}